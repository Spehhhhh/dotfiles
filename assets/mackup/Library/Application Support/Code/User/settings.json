{
  "editor.accessibilitySupport": "off",
  "editor.bracketPairColorization.enabled": true,
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.fontFamily": "'MonoLisa Nerd Font', 'Source Han Sans SC'",
  "editor.fontLigatures": true,
  "editor.fontSize": 12,
  "editor.lineHeight": 0,
  // "editor.fontFamily": "'CaskaydiaCove Nerd Font', 'Source Han Sans SC'",
  // "editor.fontLigatures": true,
  // "editor.fontSize": 12,
  // "editor.lineHeight": 1.6,
  "editor.formatOnSave": true,
  "editor.inlineSuggest.enabled": true,
  "editor.linkedEditing": true,
  "editor.minimap.enabled": false,
  "editor.stickyScroll.enabled": true,
  "editor.semanticTokenColorCustomizations": {
    "enabled": true
  },
  "editor.suggestSelection": "first",
  "editor.tabSize": 2,
  "editor.wordWrap": "off",
  "editor.guides.indentation": false,
  "editor.guides.bracketPairs": false,
  "editor.unicodeHighlight.ambiguousCharacters": false,
  "diffEditor.wordWrap": "off",
  "diffEditor.renderSideBySide": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.maxComputationTime": 20000,
  "terminal.external.osxExec": "/Applications/iTerm.app/Contents/MacOS/iTerm2",
  "terminal.integrated.commandsToSkipShell": ["language-julia.interrupt"],
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.fontFamily": "'MonoLisa Nerd Font', 'Source Han Sans SC'",
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.inheritEnv": false,
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "powershell.startAutomatically": false,
  "code-runner.preserveFocus": false,
  "code-runner.runInTerminal": true,
  "code-runner.executorMap": {
    "beancount": "fava $fullFileName -p 4000",
    "markdown": "cd $dir && md-formatter -a $fullFileName",
    "python": "$pythonPath -u $fullFileName"
  },
  "code-runner.executorMapByGlob": {
    "*.lmql": "lmql run $fullFileName",
    "*.typ": "typst $fullFileName"
  },
  "code-runner.clearPreviousOutput": true,
  "code-runner.ignoreSelection": true,
  "code-runner.saveFileBeforeRun": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "scminput": false,
    "rust": false
  },
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  "git.openRepositoryInParentFolders": "never",
  "gitlens.views.repositories.files.layout": "list",
  "gitlens.codeLens.scopes": ["document"],
  "workbench.activityBar.visible": true,
  "workbench.colorTheme": "Catppuccin Mocha",
  "workbench.colorCustomizations": {
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.lineHighlightBorder": "#9fced11f"
  },
  "workbench.iconTheme": "material-icon-theme",
  "workbench.tree.indent": 22,
  "workbench.tree.renderIndentGuides": "always",
  "workbench.startupEditor": "none",
  "workbench.sideBar.location": "right",
  // editor
  // open files as tabs
  "workbench.editor.enablePreview": true,
  // reveal existing files if they are open (avoids tons of tabs)
  "workbench.editor.revealIfOpen": true,
  // open files from quick open as tabs
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook",
    "*.pdf": "latex-workshop-pdf-hook"
  },
  "workbench.layoutControl.enabled": true,
  "todohighlight.include": ["**/*.txt", "**/*.chatml"],
  "todohighlight.keywords": [
    {
      "text": "<|im_start|>user",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    },
    {
      "text": "<|im_start|>assistant",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    },
    {
      "text": "<|im_start|>system",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    },
    {
      "text": "<|im_end|>",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    },
    {
      "text": "Let's think step by step",
      "color": "#FF0000",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    },
    {
      "text": "the answer",
      "color": "#FF0000",
      "backgroundColor": "rgba(0, 0, 0, 0)"
    }
  ],
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "#TODO",
    "#Todo",
    "[[TODO]]",
    "[ ]",
    "[x]"
  ],
  "todo-tree.highlights.customHighlight": {
    "BUG": {
      "foreground": "#FF0000",
      "iconColour": "#FF0000"
    },
    "TODO": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "#TODO": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "#Todo": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "[[TODO]]": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    }
  },
  "xml.symbols.maxItemsComputed": 20000,
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
  "jupyter.widgetScriptSources": ["jsdelivr.com", "unpkg.com"],
  "jupyter.askForKernelRestart": false,
  "python.defaultInterpreterPath": "~/.conda/envs/LearningAI/bin/python",
  "python.analysis.typeCheckingMode": "basic",
  "python.languageServer": "Pylance",
  "black-formatter.args": ["--line-length=120"],
  "flake8.args": ["--max-line-length=120", "--ignore=E203,E402,E501,W503"],
  "pylint.args": ["--max-line-length=120"],
  "isort.check": true,
  "isort.importStrategy": "fromEnvironment",
  "isort.args": ["--line-length=120"],
  "markdownlint.config": {
    // https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc
    // MD004/ul-style - Unordered list style
    "MD004": false,
    // MD007/ul-indent - Unordered list indentation
    // "MD007": {
    //   "indent": 4
    // },
    "MD007": false,
    // MD010/no-hard-tabs - Hard tabs
    "MD010": false,
    // MD013/line-length - Line length
    "MD013": false,
    // MD018/no-missing-space-atx - No space after hash on atx style heading
    "MD018": false,
    // MD025/single-title/single-h1 - Multiple top-level headings in the same document
    "MD025": false,
    // MD026/no-trailing-punctuation - Trailing punctuation in heading
    "MD026": false,
    // MD033/no-inline-html - Inline HTML
    "MD033": false,
    // MD034/no-bare-urls - Bare URL used
    "MD034": false,
    // MD041/first-line-heading/first-line-h1 - First line in a file should be a top-level heading
    "MD041": false,
    // MD045/no-alt-text - Images should have alternate text (alt text)
    "MD045": false
  },
  "markdown.extension.toc.levels": "2..6",
  "markdown.marp.exportType": "html",
  "markdown.marp.enableHtml": true,
  "markdown.validate.enabled": true,
  "markdown.extension.italic.indicator": "_",
  "markdown.extension.list.indentationSize": "inherit",
  "markdown.extension.tableFormatter.normalizeIndentation": true,
  "markdown.suggest.paths.enabled": false,
  "material-icon-theme.files.associations": {
    "Brewfile_dev": "ruby",
    "Brewfile_leaves": "ruby",
    "*.autocorrectrc": "yaml",
    "*.coverage": "log",
    "*.lmql": "python",
    "*.secrets.baseline": "json",
    "*.strings": "plist",
    "*.typ": "tex"
  },
  "material-icon-theme.languages.associations": {
    "beancount": "Log",
    "qalc": "Log"
  },
  "files.associations": {
    ".gitconfig": "ini",
    ".gitconfig.local": "ini"
  },
  "indentRainbow.ignoreLinePatterns": [
    "/[ \t]* [*]/g", // lines beginning with <whitespace><space>*
    "/[ \t]+[/]{2}/g" // lines beginning with <whitespace>//
  ],
  "indentRainbow.ignoreErrorLanguages": ["*"],
  "indentRainbow.excludedLanguages": [
    "beancount",
    "csv",
    "latex",
    "log",
    "magit",
    "markdown",
    "plaintext"
  ],
  "indentRainbow.colorOnWhiteSpaceOnly": true,
  "prettier.tabWidth": 2,
  "[latex]": {
    "editor.acceptSuggestionOnEnter": "on",
    "editor.snippetSuggestions": "top",
    "editor.tabCompletion": "on",
    "editor.quickSuggestions": {
      "comments": "on",
      "strings": "on",
      "other": "on"
    },
    "editor.defaultFormatter": "James-Yu.latex-workshop",
    "editor.fontSize": 14,
    "editor.formatOnSave": true,
    "editor.renderWhitespace": "selection", // all will cause lag
    "editor.tabSize": 2,
    "editor.wordWrap": "on"
  },
  "[markdown]": {
    "editor.acceptSuggestionOnEnter": "on",
    "editor.snippetSuggestions": "top",
    "editor.tabCompletion": "on",
    "editor.quickSuggestions": {
      "comments": "on",
      "strings": "on",
      "other": "on"
    },
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
    "editor.fontSize": 14,
    "editor.formatOnSave": false,
    "editor.renderWhitespace": "selection", // all will cause lag
    "editor.tabSize": 4,
    "editor.wordWrap": "on"
  },
  "[lua]": {
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "[python]": {
    "editor.codeActionsOnSave": {
      "source.organizeImports": false
    },
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.formatOnSave": false,
    "editor.formatOnType": false,
    "editor.tabSize": 4
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "[yml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "autocorrect.enable": false,
  "autocorrect.enableLint": true,
  "autocorrect.formatOnSave": false,
  "beancount.fixedCJKWidth": true,
  "beancount.inputMethods": ["pinyin"],
  "beancount.mainBeanFile": "~/Databases/Ledger/main.bean",
  "beancountFormatter.currencyColumn": 72,
  "beancountFormatter.fixedCJKWidth": true,
  "errorLens.excludeBySource": ["eslint", "jshint"],
  "evenBetterToml.formatter.alignEntries": true,
  "evenBetterToml.formatter.indentEntries": true,
  "evenBetterToml.schema.enabled": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "file-browser.hideIgnoredFiles": true,
  "gitlens.defaultDateFormat": "YYYY-MM-DD hh:mm",
  "gitlens.defaultDateLocale": null,
  "gitlens.defaultDateShortFormat": "YYYY-MM-DD",
  "gitlens.defaultTimeFormat": "hh:mm",
  "json.maxItemsComputed": 20000,
  "julia.enableTelemetry": false,
  "julia.executablePath": "julia +release~aarch64",
  "julia.symbolCacheDownload": true,
  "markdown-preview-enhanced.previewTheme": "one-light.css",
  "path-autocomplete.triggerOutsideStrings": true,
  "hediet.vscode-drawio.resizeImages": null,
  "redhat.telemetry.enabled": false,
  "remote.SSH.connectTimeout": 1000,
  "shellcheck.enable": true,
  "shellcheck.enableQuickFix": true,
  "shellcheck.run": "onType",
  "shellcheck.executablePath": "/opt/homebrew/bin/shellcheck",
  "shellcheck.exclude": ["SC1091", "SC2148", "SC2155"],
  "shellcheck.customArgs": [],
  "shellcheck.ignorePatterns": {
    "**/*.xonshrc": true,
    "**/*.xsh": true,
    "**/*.zsh": true,
    "**/*.zshrc": true,
    "**/zshrc": true,
    "**/*.zprofile": true,
    "**/zprofile": true,
    "**/*.zlogin": true,
    "**/zlogin": true,
    "**/*.zlogout": true,
    "**/zlogout": true,
    "**/*.zshenv": true,
    "**/zshenv": true,
    "**/*.zsh-theme": true
  },
  "shellcheck.ignoreFileSchemes": ["git", "gitfs", "output"],
  "window.commandCenter": false,
  "yaml.maxItemsComputed": 20000,
  "yaml.schemas": {
    "https://json.schemastore.org/github-workflow.json": ".github/workflows/*"
  },
  "rift.autostart": true,
  "rift.chatModel": "openai:gpt-4",
  "mojo.modularHomePath": "/Users/alex/.modular",
  "files.simpleDialog.enable": true,
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "cSpell.customDictionaries": {
    "custom-dictionary-user": {
      "name": "custom-dictionary-user",
      "path": "~/.cspell/custom-dictionary-user.txt",
      "addWords": true,
      "scope": "user"
    }
  },
  "platformio-ide.activateOnlyOnPlatformIOProject": true,
  "platformio-ide.useBuiltinPython": false,
  // nvim (old)
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",
  // vim (old)
  "vim.smartRelativeLine": true,
  // // vim & VSpaceCode (old)
  // // Vim easymotion is required for Jump menu - <SPC> j
  // "vim.easymotion": true,
  // // Use system clipboard for VIM
  // "vim.useSystemClipboard": true,
  // // Trigger the main which key menu with in the active editor with VIM
  // // This cannot be put into keybindings.json because it will
  // // create conflict with Vim.
  // // https://github.com/stevenguh/spacecode/issues/3
  // "vim.normalModeKeyBindingsNonRecursive": [
  //   {
  //     "before": ["<space>"],
  //     "commands": ["vspacecode.space"]
  //   },
  //   {
  //     "before": [","],
  //     "commands": [
  //       "vspacecode.space",
  //       {
  //         "command": "whichkey.triggerKey",
  //         "args": "m"
  //       }
  //     ]
  //   }
  // ],
  // "vim.visualModeKeyBindingsNonRecursive": [
  //   {
  //     "before": ["<space>"],
  //     "commands": ["vspacecode.space"]
  //   },
  //   {
  //     "before": [","],
  //     "commands": [
  //       "vspacecode.space",
  //       {
  //         "command": "whichkey.triggerKey",
  //         "args": "m"
  //       }
  //     ]
  //   }
  // ],
  // vim & VSpaceCode from Scott
  "vim.useSystemClipboard": true,
  "vim.foldfix": true,
  "vim.timeout": 1000,
  "vim.easymotion": true,
  "vim.sneak": true,
  "vim.incsearch": true,
  "vim.useCtrlKeys": true,
  "vim.hlsearch": true,
  "vim.insertModeKeyBindings": [
    {
      "before": ["k", "j"],
      "after": ["<Esc>"]
    },
    {
      "before": ["j", "k"],
      "after": ["<Esc>"]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    { "before": ["C-l"], "commands": ["workbench.action.navigateRight"] },
    { "before": ["C-h"], "commands": ["workbench.action.navigateLeft"] },
    { "before": ["C-j"], "commands": ["workbench.action.navigateDown"] },
    { "before": ["C-k"], "commands": ["workbench.action.navigateUp"] },
    { "before": ["L"], "commands": ["workbench.action.nextEditor"] },
    { "before": ["H"], "commands": ["workbench.action.previousEditor"] },
    { "before": ["<space>"], "commands": ["whichkey.show"] }
  ],
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["g", "r"],
      "commands": ["editor.action.rename"],
      "when": "editorHasRenameProvider && editorTextFocus && !editorReadonly"
    },
    { "before": ["g", "p"], "commands": ["editor.action.peekDefinition"] },
    { "before": ["g", "h"], "commands": ["references-view.findReferences"] },
    {
      "before": ["<C-u>"],
      "after": ["1", "0", "k"]
    },
    {
      "before": ["<C-d>"],
      "after": ["1", "0", "j"]
    },
    { "before": ["C-l"], "commands": ["workbench.action.navigateRight"] },
    { "before": ["C-h"], "commands": ["workbench.action.navigateLeft"] },
    { "before": ["C-j"], "commands": ["workbench.action.navigateDown"] },
    { "before": ["C-k"], "commands": ["workbench.action.navigateUp"] },
    { "before": ["L"], "commands": ["workbench.action.nextEditor"] },
    { "before": ["H"], "commands": ["workbench.action.previousEditor"] },
    {
      "before": ["K"],
      "commands": ["editor.action.showHover"]
    },
    {
      "before": ["g", "l"],
      "commands": ["editor.action.showHover"]
    },
    { "before": ["+"], "commands": ["workbench.action.increaseViewSize"] },
    { "before": ["_"], "commands": ["workbench.action.decreaseViewSize"] },
    { "before": ["<space>"], "commands": ["whichkey.show"] },
    { "before": ["]", "e"], "commands": ["editor.action.marker.next"] },
    { "before": ["[", "e"], "commands": ["editor.action.marker.prev"] }
  ],
  // whichkey from Scott
  // "whichkey.delay": 100,
  // "whichkey.bindings": [
  //   {
  //     "key": " ",
  //     "name": "Commands",
  //     "icon": "rocket",
  //     "type": "command",
  //     "command": "workbench.action.showCommands"
  //   },
  //   {
  //     "key": "/",
  //     "name": "Toggle comment",
  //     "icon": "comment",
  //     "type": "command",
  //     "command": "editor.action.commentLine"
  //   },
  //   {
  //     "key": "z",
  //     "name": "Toggle window",
  //     "icon": "",
  //     "type": "command",
  //     "command": "workbench.action.toggleEditorWidths"
  //   },
  //   {
  //     "key": "w",
  //     "type": "command",
  //     "name": "Save file",
  //     "icon": "save",
  //     "command": "workbench.action.files.save"
  //   },
  //   {
  //     "key": "f",
  //     "name": "Find file in project",
  //     "icon": "file",
  //     "type": "command",
  //     "command": "workbench.action.quickOpen"
  //   },
  //   {
  //     "key": "t",
  //     "name": "+Test",
  //     "icon": "test",
  //     "type": "bindings",
  //     "bindings": [
  //       {
  //         "key": "t",
  //         "name": "Test at cursor",
  //         "type": "conditional",
  //         "bindings": [
  //           {
  //             "key": "languageId:elixir",
  //             "name": "Run elixir test at cursor in IEx shell",
  //             "type": "command",
  //             "command": "elixir-test-in-iex.runTestAtCursor"
  //           },
  //           {
  //             "key": "languageId:typescript",
  //             "name": "Run jest test at cursor",
  //             "type": "command",
  //             "command": "extension.runJest"
  //           }
  //         ]
  //       },
  //       {
  //         "key": "T",
  //         "name": "Test File",
  //         "type": "conditional",
  //         "bindings": [
  //           {
  //             "key": "languageId:elixir",
  //             "name": "Run elixir test",
  //             "type": "command",
  //             "command": "elixir-test-in-iex.runTestFile"
  //           },
  //           {
  //             "key": "languageId:typescript",
  //             "name": "Run jest test ",
  //             "type": "command",
  //             "command": "extension.runJestFile"
  //           }
  //         ]
  //       },
  //       {
  //         "key": "D",
  //         "name": "Detach the activate terminal",
  //         "type": "command",
  //         "command": "workbench.action.terminal.detachSession"
  //       }
  //     ]
  //   },
  //   {
  //     "key": "b",
  //     "name": "+Buffers",
  //     "icon": "file",
  //     "type": "bindings",
  //     "bindings": [
  //       {
  //         "key": "H",
  //         "name": "Move buffer into left window",
  //         "icon": "triangle-left",
  //         "type": "command",
  //         "command": "workbench.action.moveEditorToLeftGroup"
  //       },
  //       {
  //         "key": "J",
  //         "name": "Move buffer into below window",
  //         "icon": "triangle-down",
  //         "type": "command",
  //         "command": "workbench.action.moveEditorToBelowGroup"
  //       },
  //       {
  //         "key": "K",
  //         "name": "Move buffer into above window",
  //         "icon": "triangle-up",
  //         "type": "command",
  //         "command": "workbench.action.moveEditorToAboveGroup"
  //       },
  //       {
  //         "key": "L",
  //         "name": "Move buffer into right window",
  //         "icon": "triangle-right",
  //         "type": "command",
  //         "command": "workbench.action.moveEditorToRightGroup"
  //       }
  //     ]
  //   },
  //   {
  //     "key": "l",
  //     "name": "+LSP",
  //     "type": "bindings",
  //     "bindings": [
  //       {
  //         "key": "f",
  //         "name": "Format buffer",
  //         "icon": "file",
  //         "type": "command",
  //         "command": "editor.action.formatDocument"
  //       }
  //     ]
  //   },
  //   {
  //     "key": "S",
  //     "name": "+Show",
  //     "icon": "info",
  //     "type": "bindings",
  //     "bindings": [
  //       {
  //         "key": "o",
  //         "name": "Show output",
  //         "icon": "output",
  //         "type": "command",
  //         "command": "workbench.action.output.toggleOutput"
  //       }
  //     ]
  //   },
  //   {
  //     "key": "h",
  //     "name": "Clear highlight",
  //     "icon": "clear-all",
  //     "type": "command",
  //     "command": "vim.remap",
  //     "args": {
  //       "commands": [
  //         {
  //           "command": ":noh"
  //         }
  //       ]
  //     }
  //   },
  //   {
  //     "key": "e",
  //     "name": "Toggle tree/explorer view",
  //     "icon": "list-tree",
  //     "type": "command",
  //     "command": "workbench.action.toggleSidebarVisibility"
  //   },
  //   {
  //     "key": "c",
  //     "name": "Close active buffer",
  //     "icon": "x",
  //     "type": "command",
  //     "command": "workbench.action.closeActiveEditor"
  //   },
  //   {
  //     "key": "q",
  //     "name": "Close active buffer",
  //     "icon": "x",
  //     "type": "command",
  //     "command": "workbench.action.closeActiveEditor"
  //   },
  //   {
  //     "key": "k",
  //     "type": "bindings",
  //     "name": "quokka",
  //     "when": "quokka.hasActiveSession && quokka.isActiveEditorRunningQuokka && !quokka.isLiveShareClient && !terminalFocus",
  //     "bindings": [
  //       {
  //         "key": "v",
  //         "name": "show value",
  //         "type": "command",
  //         "command": "quokka.showValue"
  //       },
  //       {
  //         "key": "q",
  //         "name": "start current file",
  //         "type": "command",
  //         "command": "quokka.makeQuokkaFromExistingFile"
  //       }
  //     ]
  //   }
  // ],
  // File Nesting
  "fileNestingUpdater.autoUpdate": true,
  "fileNestingUpdater.autoUpdateInterval": 20160,
  "fileNestingUpdater.promptOnAutoUpdate": true,
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "//": "Last update at 25/10/2023, 01:06:58",
    "*.asax": "$(capture).*.cs, $(capture).*.vb",
    "*.ascx": "$(capture).*.cs, $(capture).*.vb",
    "*.ashx": "$(capture).*.cs, $(capture).*.vb",
    "*.aspx": "$(capture).*.cs, $(capture).*.vb",
    "*.bloc.dart": "$(capture).event.dart, $(capture).state.dart",
    "*.c": "$(capture).h",
    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",
    "*.component.ts": "$(capture).component.html, $(capture).component.spec.ts, $(capture).component.css, $(capture).component.scss, $(capture).component.sass, $(capture).component.less",
    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cs": "$(capture).*.cs",
    "*.cshtml": "$(capture).cshtml.cs",
    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.css": "$(capture).css.map, $(capture).*.css",
    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",
    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",
    "*.go": "$(capture)_test.go",
    "*.java": "$(capture).class",
    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js",
    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx, $(capture).less, $(capture).module.less",
    "*.master": "$(capture).*.cs, $(capture).*.vb",
    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",
    "*.module.ts": "$(capture).resolver.ts, $(capture).controller.ts, $(capture).service.ts",
    "*.mts": "$(capture).mts.map, $(capture).*.mts, $(capture)_*.mts",
    "*.pubxml": "$(capture).pubxml.user",
    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",
    "*.tex": "$(capture).acn, $(capture).acr, $(capture).alg, $(capture).aux, $(capture).bbl, $(capture).blg, $(capture).fdb_latexmk, $(capture).fls, $(capture).glg, $(capture).glo, $(capture).gls, $(capture).idx, $(capture).ind, $(capture).ist, $(capture).lof, $(capture).log, $(capture).lot, $(capture).out, $(capture).pdf, $(capture).synctex.gz, $(capture).toc, $(capture).xdv",
    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts",
    "*.tsx": "$(capture).ts, $(capture).*.tsx, $(capture)_*.ts, $(capture)_*.tsx, $(capture).less, $(capture).module.less",
    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.vue": "$(capture).*.ts, $(capture).*.js, $(capture).story.vue",
    "*.xaml": "$(capture).xaml.cs",
    "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js,+layout.gql",
    "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js,+page.gql",
    ".clang-tidy": ".clang-format, .clangd, compile_commands.json",
    ".env": "*.env, .env.*, .envrc, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    ".project": ".classpath",
    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",
    "I*.cs": "$(capture).cs",
    "Pipfile": ".editorconfig, .flake8, .isort.cfg, .python-version, Pipfile, Pipfile.lock, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
    "default.nix": "shell.nix",
    "deno.json*": "*.env, .env.*, .envrc, api-extractor.json, deno.lock, env.d.ts, import-map.json, import_map.json, jsconfig.*, tsconfig.*, tsdoc.*",
    "dockerfile": ".dockerignore, docker-compose.*, dockerfile*",
    "flake.nix": "flake.lock",
    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "gemfile": ".ruby-version, gemfile.lock",
    "go.mod": ".air*, go.sum",
    "go.work": "go.work.sum",
    "hatch.toml": ".editorconfig, .flake8, .isort.cfg, .python-version, hatch.toml, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, .iex.exs, .tool-versions, mix.lock",
    "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, next-env.d.ts, next-i18next.config.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .nuxtignore, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "package.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .release-please*.json, .releaserc*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, bun.lockb, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json*, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock, pubspec_overrides.yaml",
    "pyproject.toml": ".editorconfig, .flake8, .isort.cfg, .pdm-python, .pdm.toml, .python-version, MANIFEST.in, Pipfile, Pipfile.lock, hatch.toml, pdm.lock, poetry.lock, pyproject.toml, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, setup.py, tox.ini",
    "quasar.conf.js": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, quasar.extensions.json, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "readme*": "authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying*, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors*",
    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "requirements.txt": ".editorconfig, .flake8, .isort.cfg, .python-version, requirements*.in, requirements*.pip, requirements*.txt, tox.ini",
    "rush.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json*, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .release-please*.json, .releaserc*, .sentry*, .simple-git-hooks*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, bun.lockb, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json*, electron-builder.*, eslint*, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, npm-shrinkwrap.json, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-please*.json, release-tasks.sh, release.config.*, renovate*, rollup.config.*, rspack*, simple-git-hooks*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "setup.cfg": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, tox.ini",
    "setup.py": ".editorconfig, .flake8, .isort.cfg, .python-version, MANIFEST.in, requirements*.in, requirements*.pip, requirements*.txt, setup.cfg, setup.py, tox.ini",
    "shims.d.ts": "*.d.ts",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, houdini.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vite.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*",
    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, i18n.config.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, rspack.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, uno.config.*, unocss.config.*, vitest.config.*, vuetify.config.*, webpack.config.*, windi.config.*"
  }
}
