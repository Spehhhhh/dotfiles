{
  "editor.bracketPairColorization.enabled": true,
  "editor.cursorBlinking": "phase",
  "editor.cursorSmoothCaretAnimation": "on",
  "editor.fontFamily": "'CaskaydiaCove Nerd Font', 'Source Han Sans SC'",
  "editor.fontLigatures": true,
  "editor.fontSize": 12,
  "editor.formatOnSave": true,
  "editor.inlineSuggest.enabled": true,
  "editor.linkedEditing": true,
  "editor.minimap.enabled": false,
  "editor.stickyScroll.enabled": true,
  "editor.suggestSelection": "first",
  "editor.tabSize": 2,
  "editor.wordWrap": "off",
  "editor.guides.indentation": false,
  "editor.guides.bracketPairs": false,
  "editor.accessibilitySupport": "off",
  "diffEditor.wordWrap": "on",
  "diffEditor.renderSideBySide": true,
  "diffEditor.ignoreTrimWhitespace": false,
  "diffEditor.maxComputationTime": 10000,
  "terminal.external.osxExec": "/Applications/iTerm.app/Contents/MacOS/iTerm2",
  "terminal.integrated.commandsToSkipShell": ["language-julia.interrupt"],
  "terminal.integrated.confirmOnExit": "hasChildProcesses",
  "terminal.integrated.defaultProfile.osx": "zsh",
  "terminal.integrated.fontFamily": "'CaskaydiaCove Nerd Font', 'Source Han Sans SC'",
  "terminal.integrated.fontSize": 13,
  "terminal.integrated.inheritEnv": false,
  "terminal.integrated.env.osx": {
    "FIG_NEW_SESSION": "1"
  },
  "powershell.startAutomatically": false,
  "code-runner.preserveFocus": false,
  "code-runner.runInTerminal": true,
  "code-runner.executorMap": {
    "beancount": "fava $fullFileName -p 4000",
    "markdown": "cd $dir && md-formatter -a $fullFileName",
    "python": "$pythonPath -u $fullFileName"
  },
  "code-runner.clearPreviousOutput": true,
  "code-runner.ignoreSelection": true,
  "code-runner.saveFileBeforeRun": true,
  "github.copilot.enable": {
    "*": true,
    "plaintext": false,
    "markdown": false,
    "rust": false
  },
  "git.autofetch": true,
  "git.confirmSync": false,
  "git.enableSmartCommit": true,
  "git.openRepositoryInParentFolders": "never",
  "gitlens.views.repositories.files.layout": "list",
  "gitlens.codeLens.scopes": ["document"],
  "workbench.activityBar.visible": true,
  "workbench.colorTheme": "One Dark Pro Darker",
  "workbench.colorCustomizations": {
    "editor.lineHighlightBackground": "#1073cf2d",
    "editor.lineHighlightBorder": "#9fced11f"
  },
  "workbench.iconTheme": "material-icon-theme",
  "workbench.tree.indent": 20,
  "workbench.tree.renderIndentGuides": "none",
  "workbench.startupEditor": "none",
  // editor
  // open files as tabs
  "workbench.editor.enablePreview": true,
  // reveal existing files if they are open (avoids tons of tabs)
  "workbench.editor.revealIfOpen": true,
  // open files from quick open as tabs
  "workbench.editor.enablePreviewFromQuickOpen": false,
  "workbench.editorAssociations": {
    "*.ipynb": "jupyter-notebook",
    "*.pdf": "latex-workshop-pdf-hook"
  },
  "workbench.layoutControl.enabled": true,
  "todo-tree.general.tags": [
    "BUG",
    "HACK",
    "FIXME",
    "TODO",
    "#TODO",
    "#Todo",
    "[[TODO]]",
    "[ ]",
    "[x]"
  ],
  "todo-tree.highlights.customHighlight": {
    "BUG": {
      "foreground": "#FF0000",
      "iconColour": "#FF0000"
    },
    "TODO": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "#TODO": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "#Todo": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    },
    "[[TODO]]": {
      "foreground": "#00FF00",
      "iconColour": "#00FF00",
      "gutterIcon": true
    }
  },
  "todo-tree.regex.regex": "(//|#|<!--|;|/\\*|^|^\\s*(-|\\d+.))\\s*($TAGS)",
  "jupyter.widgetScriptSources": ["jsdelivr.com", "unpkg.com"],
  "jupyter.askForKernelRestart": false,
  "isort.check": true,
  "isort.importStrategy": "fromEnvironment",
  "isort.args": ["--line-length=120"],
  "python.defaultInterpreterPath": "~/.conda/envs/LearningAI/bin/python",
  "python.formatting.blackArgs": ["--line-length=120"],
  "python.formatting.provider": "black",
  "python.languageServer": "Pylance",
  // "python.linting.enabled": true,
  // "python.linting.flake8Enabled": true,
  // "python.testing.unittestEnabled": false,
  // "python.testing.pytestEnabled": true,
  // "python.testing.pytestArgs": ["tests"],
  "markdownlint.config": {
    // https://github.com/DavidAnson/markdownlint/blob/main/schema/.markdownlint.jsonc
    // MD004/ul-style - Unordered list style
    "MD004": false,
    // MD007/ul-indent - Unordered list indentation
    "MD007": {
      "indent": 4
    },
    // MD013/line-length - Line length
    "MD013": false,
    // MD018/no-missing-space-atx - No space after hash on atx style heading
    "MD018": false,
    // MD025/single-title/single-h1 - Multiple top-level headings in the same document
    "MD025": false,
    // MD026/no-trailing-punctuation - Trailing punctuation in heading
    "MD026": false,
    // MD033/no-inline-html - Inline HTML
    "MD033": false,
    // MD034/no-bare-urls - Bare URL used
    "MD034": false,
    // MD041/first-line-heading/first-line-h1 - First line in a file should be a top-level heading
    "MD041": false,
    // MD045/no-alt-text - Images should have alternate text (alt text)
    "MD045": false
  },
  "markdown.extension.toc.levels": "2..6",
  "markdown.marp.exportType": "html",
  "markdown.marp.enableHtml": true,
  "markdown.validate.enabled": true,
  "markdown.extension.italic.indicator": "_",
  "markdown.extension.list.indentationSize": "inherit",
  "markdown.extension.tableFormatter.normalizeIndentation": true,
  "markdown.suggest.paths.enabled": false,
  "markdownFormatter.formatOpt": {
    "indent_size": 4
  },
  "markdownFormatter.formatULSymbol": false,
  "material-icon-theme.files.associations": {
    "Brewfile_dev": "ruby",
    "Brewfile_leaves": "ruby",
    "*.autocorrectrc": "yaml",
    "*.coverage": "log",
    "*.secrets.baseline": "json",
    "*.strings": "plist"
  },
  "material-icon-theme.languages.associations": {
    "beancount": "Log",
    "qalc": "Log"
  },
  "files.associations": {
    ".gitconfig": "ini",
    ".gitconfig.local": "ini"
  },
  "indentRainbow.ignoreLinePatterns": [
    "/[ \t]* [*]/g", // lines beginning with <whitespace><space>*
    "/[ \t]+[/]{2}/g" // lines beginning with <whitespace>//
  ],
  "indentRainbow.ignoreErrorLanguages": [
    "bib",
    "clojure",
    "json",
    "latex",
    "markdown",
    "python",
    "rust"
  ],
  "indentRainbow.excludedLanguages": ["log", "magit", "plaintext"],
  "indentRainbow.colorOnWhiteSpaceOnly": true,
  "prettier.tabWidth": 2,
  "[latex]": {
    "editor.defaultFormatter": "James-Yu.latex-workshop",
    "editor.fontSize": 12,
    "editor.formatOnSave": true,
    "editor.renderWhitespace": "selection", // all will cause lag
    "editor.tabSize": 2,
    "editor.wordWrap": "on"
  },
  "[markdown]": {
    "editor.defaultFormatter": "DavidAnson.vscode-markdownlint",
    "editor.fontSize": 12,
    "editor.formatOnSave": false,
    "editor.renderWhitespace": "selection", // all will cause lag
    "editor.tabSize": 4,
    "editor.wordWrap": "on",
    "editor.quickSuggestions": {
      "comments": "on",
      "strings": "on",
      "other": "on"
    }
  },
  "[lua]": {
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "[python]": {
    "editor.codeActionsOnSave": {
      "source.organizeImports": false
    },
    "editor.defaultFormatter": "ms-python.python",
    "editor.formatOnSave": false,
    "editor.tabSize": 4
  },
  "[html]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[json]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.tabSize": 2
  },
  "[yaml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "[yml]": {
    "editor.defaultFormatter": "redhat.vscode-yaml",
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },
  "notebook.cellToolbarLocation": {
    "default": "right",
    "jupyter-notebook": "left"
  },
  "C_Cpp.intelliSenseEngine": "Disabled",
  "autocorrect.formatOnSave": false,
  "beancount.fixedCJKWidth": true,
  "beancount.inputMethods": ["pinyin"],
  "beancount.mainBeanFile": "~/Databases/Ledger/main.bean",
  "beancountFormatter.currencyColumn": 72,
  "beancountFormatter.fixedCJKWidth": true,
  "dendron.rootDir": "~/Databases/Dendron",
  "errorLens.excludeBySource": ["eslint", "jshint"],
  "evenBetterToml.formatter.alignEntries": true,
  "evenBetterToml.formatter.indentEntries": true,
  "evenBetterToml.schema.enabled": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "file-browser.hideIgnoredFiles": true,
  "gitlens.defaultDateFormat": "YYYY-MM-DD hh:mm",
  "gitlens.defaultDateLocale": null,
  "gitlens.defaultDateShortFormat": "YYYY-MM-DD",
  "gitlens.defaultTimeFormat": "hh:mm",
  "json.maxItemsComputed": 10000,
  "julia.enableTelemetry": false,
  "julia.executablePath": "julia +release~aarch64",
  "julia.symbolCacheDownload": true,
  "markdown-preview-enhanced.previewTheme": "one-light.css",
  "path-autocomplete.triggerOutsideStrings": true,
  "redhat.telemetry.enabled": false,
  "remote.SSH.connectTimeout": 1000,
  "shellcheck.exclude": ["SC1091", "SC2148", "SC2155"],
  "shellcheck.executablePath": "/opt/homebrew/bin/shellcheck",
  "window.commandCenter": false,
  "yaml.schemas": {
    "https://json.schemastore.org/github-workflow.json": ".github/workflows/*"
  },
  "files.simpleDialog.enable": true,
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "cSpell.customDictionaries": {
    "custom-dictionary-user": {
      "name": "custom-dictionary-user",
      "path": "~/.cspell/custom-dictionary-user.txt",
      "addWords": true,
      "scope": "user"
    }
  },
  "hediet.vscode-drawio.codeLinkActivated": true,
  "liveServer.settings.donotShowInfoMsg": true,
  "matlab.matlabpath": "/Applications/MATLAB_R2022a.app/bin",
  "matlab.mlintpath": "/Applications/MATLAB_R2022a.app/bin/maci64/mlint",
  "platformio-ide.activateOnlyOnPlatformIOProject": true,
  "platformio-ide.useBuiltinPython": false,
  "projectManager.git.baseFolders": ["~/Coding", "~/Desktop", "~/Stacks"],
  "gitProjectManager.baseProjectsFolders": [
    "~/Coding",
    "~/Desktop",
    "~/Stacks"
  ],
  // nvim
  "vscode-neovim.neovimExecutablePaths.darwin": "/opt/homebrew/bin/nvim",
  // vim
  "vim.smartRelativeLine": true,
  // VSpaceCode
  // Vim easymotion is required for Jump menu - <SPC> j
  "vim.easymotion": true,
  // Use system clipboard for VIM
  "vim.useSystemClipboard": true,
  // Trigger the main which key menu with in the active editor with VIM
  // This cannot be put into keybindings.json because it will
  // create conflict with Vim.
  // https://github.com/stevenguh/spacecode/issues/3
  "vim.normalModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["vspacecode.space"]
    },
    {
      "before": [","],
      "commands": [
        "vspacecode.space",
        {
          "command": "whichkey.triggerKey",
          "args": "m"
        }
      ]
    }
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    {
      "before": ["<space>"],
      "commands": ["vspacecode.space"]
    },
    {
      "before": [","],
      "commands": [
        "vspacecode.space",
        {
          "command": "whichkey.triggerKey",
          "args": "m"
        }
      ]
    }
  ],
  // File Nesting
  "fileNestingUpdater.autoUpdate": true,
  "fileNestingUpdater.autoUpdateInterval": 20160,
  "fileNestingUpdater.promptOnAutoUpdate": true,
  "explorer.fileNesting.enabled": true,
  "explorer.fileNesting.expand": false,
  "explorer.fileNesting.patterns": {
    "//": "Last update at 2/19/2023, 3:38:15 AM",
    "*.asax": "$(capture).*.cs, $(capture).*.vb",
    "*.ascx": "$(capture).*.cs, $(capture).*.vb",
    "*.ashx": "$(capture).*.cs, $(capture).*.vb",
    "*.aspx": "$(capture).*.cs, $(capture).*.vb",
    "*.bloc.dart": "$(capture).event.dart, $(capture).state.dart",
    "*.c": "$(capture).h",
    "*.cc": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cjs": "$(capture).cjs.map, $(capture).*.cjs, $(capture)_*.cjs",
    "*.component.ts": "$(capture).component.html, $(capture).component.spec.ts, $(capture).component.css, $(capture).component.scss, $(capture).component.sass, $(capture).component.less",
    "*.cpp": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.cs": "$(capture).*.cs",
    "*.cshtml": "$(capture).cshtml.cs",
    "*.csproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.css": "$(capture).css.map, $(capture).*.css",
    "*.cxx": "$(capture).hpp, $(capture).h, $(capture).hxx",
    "*.dart": "$(capture).freezed.dart, $(capture).g.dart",
    "*.ex": "$(capture).html.eex, $(capture).html.heex, $(capture).html.leex",
    "*.go": "$(capture)_test.go",
    "*.java": "$(capture).class",
    "*.js": "$(capture).js.map, $(capture).*.js, $(capture)_*.js",
    "*.jsx": "$(capture).js, $(capture).*.jsx, $(capture)_*.js, $(capture)_*.jsx",
    "*.master": "$(capture).*.cs, $(capture).*.vb",
    "*.mjs": "$(capture).mjs.map, $(capture).*.mjs, $(capture)_*.mjs",
    "*.module.ts": "$(capture).resolver.ts, $(capture).controller.ts, $(capture).service.ts",
    "*.pubxml": "$(capture).pubxml.user",
    "*.resx": "$(capture).*.resx, $(capture).designer.cs, $(capture).designer.vb",
    "*.tex": "$(capture).acn, $(capture).acr, $(capture).alg, $(capture).aux, $(capture).bbl, $(capture).blg, $(capture).fdb_latexmk, $(capture).fls, $(capture).glg, $(capture).glo, $(capture).gls, $(capture).idx, $(capture).ind, $(capture).ist, $(capture).lof, $(capture).log, $(capture).lot, $(capture).out, $(capture).pdf, $(capture).synctex.gz, $(capture).toc, $(capture).xdv",
    "*.ts": "$(capture).js, $(capture).d.ts.map, $(capture).*.ts, $(capture)_*.js, $(capture)_*.ts",
    "*.mts": "$(capture).ts, $(capture).*.mts, $(capture)_*.ts, $(capture)_*.mts",
    "*.tsx": "$(capture).ts, $(capture).*.tsx, $(capture)_*.ts, $(capture)_*.tsx",
    "*.vbproj": "*.config, *proj.user, appsettings.*, bundleconfig.json",
    "*.vue": "$(capture).*.ts, $(capture).*.js, $(capture).story.vue",
    "*.xaml": "$(capture).xaml.cs",
    "+layout.svelte": "+layout.ts,+layout.ts,+layout.js,+layout.server.ts,+layout.server.js",
    "+page.svelte": "+page.server.ts,+page.server.js,+page.ts,+page.js ",
    ".clang-tidy": ".clang-format, .clangd, compile_commands.json",
    ".env": "*.env, .env.*, .envrc, env.d.ts",
    ".gitignore": ".gitattributes, .gitmodules, .gitmessage, .mailmap, .git-blame*",
    ".project": ".classpath",
    "BUILD.bazel": "*.bzl, *.bazel, *.bazelrc, bazel.rc, .bazelignore, .bazelproject, WORKSPACE",
    "CMakeLists.txt": "*.cmake, *.cmake.in, .cmake-format.yaml, CMakePresets.json",
    "I*.cs": "$(capture).cs",
    "artisan": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, server.php, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, webpack.mix.js, windi.config.*",
    "astro.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "cargo.toml": ".clippy.toml, .rustfmt.toml, cargo.lock, clippy.toml, cross.toml, rust-toolchain.toml, rustfmt.toml",
    "composer.json": ".php*.cache, composer.lock, phpunit.xml*, psalm*.xml",
    "default.nix": "shell.nix",
    "deno.json*": "*.env, .env.*, .envrc, api-extractor.json, env.d.ts, import-map.json, import_map.json, jsconfig.*, tsconfig.*, tsdoc.*",
    "dockerfile": ".dockerignore, docker-compose.*, dockerfile*",
    "flake.nix": "flake.lock",
    "gatsby-config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, gatsby-browser.*, gatsby-node.*, gatsby-ssr.*, gatsby-transformer.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "gemfile": ".ruby-version, gemfile.lock",
    "go.mod": ".air*, go.sum",
    "go.work": "go.work.sum",
    "mix.exs": ".credo.exs, .dialyzer_ignore.exs, .formatter.exs, .iex.exs, .tool-versions, mix.lock",
    "next.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, next-env.d.ts, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "nuxt.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "package.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-tasks.sh, renovate*, rollup.config.*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "pubspec.yaml": ".metadata, .packages, all_lint_rules.yaml, analysis_options.yaml, build.yaml, pubspec.lock, pubspec_overrides.yaml",
    "pyproject.toml": ".pdm.toml, pdm.lock, pyproject.toml",
    "quasar.conf.js": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, quasar.extensions.json, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "readme*": "authors, backers*, changelog*, citation*, code_of_conduct*, codeowners, contributing*, contributors, copying, credits, governance.md, history.md, license*, maintainers, readme*, security.md, sponsors*",
    "remix.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, remix.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "rush.json": ".browserslist*, .circleci*, .commitlint*, .cz-config.js, .czrc, .dlint.json, .dprint.json, .editorconfig, .eslint*, .firebase*, .flowconfig, .github*, .gitlab*, .gitpod*, .huskyrc*, .jslint*, .lintstagedrc*, .markdownlint*, .node-version, .nodemon*, .npm*, .nvmrc, .pm2*, .pnp.*, .pnpm*, .prettier*, .releaserc*, .sentry*, .stackblitz*, .styleci*, .stylelint*, .tazerc*, .textlint*, .tool-versions, .travis*, .versionrc*, .vscode*, .watchman*, .xo-config*, .yamllint*, .yarnrc*, Procfile, apollo.config.*, appveyor*, azure-pipelines*, bower.json, build.config.*, commitlint*, crowdin*, dangerfile*, dlint.json, dprint.json, firebase.json, grunt*, gulp*, jenkins*, lerna*, lint-staged*, nest-cli.*, netlify*, nodemon*, nx.*, package-lock.json, package.nls*.json, phpcs.xml, pm2.*, pnpm*, prettier*, pullapprove*, pyrightconfig.json, release-tasks.sh, renovate*, rollup.config.*, stylelint*, tslint*, tsup.config.*, turbo*, typedoc*, unlighthouse*, vercel*, vetur.config.*, webpack*, workspace.json, xo.config.*, yarn*",
    "shims.d.ts": "*.d.ts",
    "svelte.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, mdsvex.config.js, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "vite.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*",
    "vue.config.*": "*.env, .babelrc*, .codecov, .cssnanorc*, .env.*, .envrc, .htmlnanorc*, .lighthouserc.*, .mocha*, .postcssrc*, .terserrc*, api-extractor.json, ava.config.*, babel.config.*, contentlayer.config.*, cssnano.config.*, cypress.*, env.d.ts, formkit.config.*, formulate.config.*, histoire.config.*, htmlnanorc.*, jasmine.*, jest.config.*, jsconfig.*, karma*, lighthouserc.*, playwright.config.*, postcss.config.*, puppeteer.config.*, svgo.config.*, tailwind.config.*, tsconfig.*, tsdoc.*, unocss.config.*, vitest.config.*, webpack.config.*, windi.config.*"
  }
}
