#!/usr/bin/env bash
#
# Script Name: frame-cutter
# Description:
#   Use FFmpeg to cut a video segment (precisely considering keyframes),
#   supports time format "HH:MM:SS" or "MM:SS",
#   and automatically increments output filenames like clip1, clip2, etc.
#
# Usage:
#   ./frame-cutter.sh <source video> <start time> <end time>
# Example:
#   ./frame-cutter.sh input.mp4 06:43 07:11
#   ./frame-cutter.sh input.mp4 00:06:43 00:07:11
#   ./frame-cutter.sh input.mp4 1:06:43 1:07:11    # Also supports 1 hour 6 min 43 sec
#

# Check if three parameters are provided: source video, start time, end time
if [ $# -ne 3 ]; then
  echo "Usage: $0 <source video> <start time> <end time>"
  echo "Example: $0 input.mp4 06:43 07:11"
  exit 1
fi

INPUT_FILE="$1"
RAW_START_TIME="$2"
RAW_END_TIME="$3"

# Check if source video file exists
if [ ! -f "$INPUT_FILE" ]; then
  echo "Error: File not found $INPUT_FILE"
  exit 1
fi

# Auto-pad "MM:SS" to "00:MM:SS"
function normalize_time() {
  local time_str="$1"
  
  # Split by colon into array
  local parts=(${time_str//:/ })
  # Length of parts array
  local count=${#parts[@]}
  
  if [ $count -eq 1 ]; then
    # Only one part -> Invalid format
    echo "Error: Invalid time format: $time_str"
    exit 1
  elif [ $count -eq 2 ]; then
    # "MM:SS" -> Pad to "00:MM:SS"
    echo "00:${parts[0]}:${parts[1]}"
  elif [ $count -eq 3 ]; then
    # "HH:MM:SS" -> Return as is
    echo "$time_str"
  else
    echo "Error: Invalid time format: $time_str"
    exit 1
  fi
}

START_TIME="$(normalize_time "$RAW_START_TIME")"
END_TIME="$(normalize_time "$RAW_END_TIME")"

# Generate output filename: clip1.mp4, clip2.mp4 ...
COUNTER=1
while true; do
  OUTPUT_FILE="clip${COUNTER}.mp4"
  if [ ! -f "$OUTPUT_FILE" ]; then
    break
  fi
  ((COUNTER++))
done

# Use ffmpeg to precisely cut video segment
#  -ss / -to: specify cut points
#  -c:v libx264 -c:a aac: re-encode (fixes screen tearing due to keyframes not at boundaries)
#  -movflags +faststart: optimize output for web playback (optional)
ffmpeg -i "$INPUT_FILE" \
       -ss "$START_TIME" \
       -to "$END_TIME" \
       -c:v libx264 -c:a aac -strict -2 \
       -movflags +faststart \
       "$OUTPUT_FILE"

# Check if FFmpeg executed successfully
if [ $? -eq 0 ]; then
  echo "Video successfully cut, output file: $OUTPUT_FILE"
else
  echo "Video cutting failed, please check command or file format."
  exit 1
fi
