#!/bin/bash

# Define variables
REMOTE_NAME="origin"  # Your remote repository name
REMOTE_MAIN_BRANCH="${REMOTE_NAME}/main" # Your remote main branch name (e.g. origin/main or origin/master)
DRY_RUN=false
PROTECTED_BRANCHES=("main" "master" "dev") # Branches you want to protect

# Function: Display help information
show_help() {
  echo "Usage: $0 [options]"
  echo "Options:"
  echo "  -n | --dry-run   Simulate branch deletion without actually deleting."
  echo "  -h | --help      Display this help information."
}

# Function: Delete branch (with dry run support)
delete_branch() {
  local branch="$1"
  if "$DRY_RUN"; then
    echo "Dry-run: git branch -d '$branch'"
  else
    git branch -d "$branch"
  fi
}

# Check if git is installed
if ! command -v git &> /dev/null; then
  echo "Error: git is not installed. Please install git first."
  exit 1
fi

# Parse command line arguments
while [[ "$#" -gt 0 ]]; do
  case "$1" in
    -n|--dry-run)
      DRY_RUN=true
      shift
      ;;
    -h|--help)
      show_help
      exit 0
      ;;
    *)
      echo "Error: Unknown option '$1'"
      show_help
      exit 1
      ;;
  esac
done

echo "Fetching latest information from remote '$REMOTE_NAME'..."
git fetch --prune "$REMOTE_NAME"

# Get list of local branches, excluding current branch and protected branches
local_branches=$(git branch --format "%(refname:short)" | grep -v '^\*' | grep -v -E "^(${PROTECTED_BRANCHES[*]})+$")

# Get list of remote branches
remote_branches=$(git branch -r --format "%(refname:short)" | sed "s|^${REMOTE_NAME}/||")

# Find branches that exist locally but not remotely
potentially_deleted=$(echo "$local_branches" | grep -vFxf <(echo "$remote_branches"))

if [[ -z "$potentially_deleted" ]]; then
  echo "No local branches found that were deleted remotely."
  exit 0
fi

echo "The following local branches may have been deleted remotely:"
echo "$potentially_deleted"

echo "Checking if these branches are merged into '$REMOTE_MAIN_BRANCH'..."
merged_branches=$(echo "$potentially_deleted" | xargs -I {} git branch --merged "$REMOTE_MAIN_BRANCH" | grep -Fx "$potentially_deleted")

if [[ -z "$merged_branches" ]]; then
  echo "No local branches found that were merged into '$REMOTE_MAIN_BRANCH' and deleted remotely."
  exit 0
fi

echo "The following local branches have been deleted remotely and merged into '$REMOTE_MAIN_BRANCH':"
echo "$merged_branches"

if "$DRY_RUN"; then
  echo "Dry-run mode enabled. The following branches would be deleted:"
  echo "$merged_branches" | awk '{ print "git branch -d", $1 }'
  echo "Run the script without '-n' or '--dry-run' to perform actual deletion."
else
  if [[ -n "$merged_branches" ]]; then
    while IFS= read -r branch; do
      read -p "Are you sure you want to delete local branch '$branch'? (y/N): " confirmation
      if [[ "$confirmation" =~ ^[Yy]$ ]]; then
        delete_branch "$branch"
      fi
    done < <(echo "$merged_branches")
  else
    echo "No branches to delete."
  fi
fi

echo "Done."
